# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotiq_s_model_control/SModel_robot_input.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SModel_robot_input(genpy.Message):
  _md5sum = "4d0701156e580a420c48833f57bc83f3"
  _type = "robotiq_s_model_control/SModel_robot_input"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 gACT 
uint8 gMOD 
uint8 gGTO 
uint8 gIMC 
uint8 gSTA 
uint8 gDTA 
uint8 gDTB 
uint8 gDTC 
uint8 gDTS 
uint8 gFLT 
uint8 gPRA 
uint8 gPOA 
uint8 gCUA 
uint8 gPRB 
uint8 gPOB 
uint8 gCUB 
uint8 gPRC 
uint8 gPOC 
uint8 gCUC 
uint8 gPRS 
uint8 gPOS 
uint8 gCUS
"""
  __slots__ = ['gACT','gMOD','gGTO','gIMC','gSTA','gDTA','gDTB','gDTC','gDTS','gFLT','gPRA','gPOA','gCUA','gPRB','gPOB','gCUB','gPRC','gPOC','gCUC','gPRS','gPOS','gCUS']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gACT,gMOD,gGTO,gIMC,gSTA,gDTA,gDTB,gDTC,gDTS,gFLT,gPRA,gPOA,gCUA,gPRB,gPOB,gCUB,gPRC,gPOC,gCUC,gPRS,gPOS,gCUS

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SModel_robot_input, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gACT is None:
        self.gACT = 0
      if self.gMOD is None:
        self.gMOD = 0
      if self.gGTO is None:
        self.gGTO = 0
      if self.gIMC is None:
        self.gIMC = 0
      if self.gSTA is None:
        self.gSTA = 0
      if self.gDTA is None:
        self.gDTA = 0
      if self.gDTB is None:
        self.gDTB = 0
      if self.gDTC is None:
        self.gDTC = 0
      if self.gDTS is None:
        self.gDTS = 0
      if self.gFLT is None:
        self.gFLT = 0
      if self.gPRA is None:
        self.gPRA = 0
      if self.gPOA is None:
        self.gPOA = 0
      if self.gCUA is None:
        self.gCUA = 0
      if self.gPRB is None:
        self.gPRB = 0
      if self.gPOB is None:
        self.gPOB = 0
      if self.gCUB is None:
        self.gCUB = 0
      if self.gPRC is None:
        self.gPRC = 0
      if self.gPOC is None:
        self.gPOC = 0
      if self.gCUC is None:
        self.gCUC = 0
      if self.gPRS is None:
        self.gPRS = 0
      if self.gPOS is None:
        self.gPOS = 0
      if self.gCUS is None:
        self.gCUS = 0
    else:
      self.gACT = 0
      self.gMOD = 0
      self.gGTO = 0
      self.gIMC = 0
      self.gSTA = 0
      self.gDTA = 0
      self.gDTB = 0
      self.gDTC = 0
      self.gDTS = 0
      self.gFLT = 0
      self.gPRA = 0
      self.gPOA = 0
      self.gCUA = 0
      self.gPRB = 0
      self.gPOB = 0
      self.gCUB = 0
      self.gPRC = 0
      self.gPOC = 0
      self.gCUC = 0
      self.gPRS = 0
      self.gPOS = 0
      self.gCUS = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_22B.pack(_x.gACT, _x.gMOD, _x.gGTO, _x.gIMC, _x.gSTA, _x.gDTA, _x.gDTB, _x.gDTC, _x.gDTS, _x.gFLT, _x.gPRA, _x.gPOA, _x.gCUA, _x.gPRB, _x.gPOB, _x.gCUB, _x.gPRC, _x.gPOC, _x.gCUC, _x.gPRS, _x.gPOS, _x.gCUS))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.gACT, _x.gMOD, _x.gGTO, _x.gIMC, _x.gSTA, _x.gDTA, _x.gDTB, _x.gDTC, _x.gDTS, _x.gFLT, _x.gPRA, _x.gPOA, _x.gCUA, _x.gPRB, _x.gPOB, _x.gCUB, _x.gPRC, _x.gPOC, _x.gCUC, _x.gPRS, _x.gPOS, _x.gCUS,) = _struct_22B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_22B.pack(_x.gACT, _x.gMOD, _x.gGTO, _x.gIMC, _x.gSTA, _x.gDTA, _x.gDTB, _x.gDTC, _x.gDTS, _x.gFLT, _x.gPRA, _x.gPOA, _x.gCUA, _x.gPRB, _x.gPOB, _x.gCUB, _x.gPRC, _x.gPOC, _x.gCUC, _x.gPRS, _x.gPOS, _x.gCUS))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.gACT, _x.gMOD, _x.gGTO, _x.gIMC, _x.gSTA, _x.gDTA, _x.gDTB, _x.gDTC, _x.gDTS, _x.gFLT, _x.gPRA, _x.gPOA, _x.gCUA, _x.gPRB, _x.gPOB, _x.gCUB, _x.gPRC, _x.gPOC, _x.gCUC, _x.gPRS, _x.gPOS, _x.gCUS,) = _struct_22B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_22B = struct.Struct("<22B")
