# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotiq_s_model_articulated_msgs/SModelRobotOutput.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SModelRobotOutput(genpy.Message):
  _md5sum = "d0c643ca7dd9fdb2d935922bf6659387"
  _type = "robotiq_s_model_articulated_msgs/SModelRobotOutput"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# rACT: Action request (activation bit).
# 0x0 - Decativate gripper.
# 0x1 - Activate gripper.

uint8 rACT

# rMOD: Changes the gripper grasping mode.
# 0x0 - Basic mode.
# 0x1 - Pinch mode.
# 0x2 - Wide mode.
# 0x3 - Scissor mode.

uint8 rMOD

# rGTO: "Go To" action moves the gripper fingers to the requested position.
# 0x0 - Stop.
# 0x1 - Go to the requested position.

uint8 rGTO

# rATR: Automatic release routine.
# 0x0 - Stop.
# 0x1 Emergency auto-release.

uint8 rATR

# rICF: Individual Control of Fingers mode. Each finger receives its own command
# unless the gripper is in the Scissor Grasping Mode and the Independent Control
# of Scissor (rICS) is not activated.
# 0x0 - Normal.
# 0x1 - Enable Individual Control of Fingers A, B and C.

uint8 rICF

# rICS: Individual Control of Scissor. The scissor axis moves independenly from
# the grasping mode. When this option is selected, the rMOD bits (grasping mode)
# are ignored as the scissor axis position is defined by the rPRS.
# 0x0 - Normal.
# 0x1 - Enable Individual Control of Scissor. Disable Mode Selection.

uint8 rICS

# rPRA: Target position of the fingers (or finger A only if bit rICF is set).
# 0x00 Minimum position (open).
# 0xFF Maximum position (close).

uint8 rPRA

# rSPA: Gripper closing or opening speed (or finger A only if bit rICF is set).
# Setting a speed will not initiate a motion.
# 0x00 Minimum speed.
# 0xFF Maximum speed.

uint8 rSPA

# rFRA: Final grasping force of the gripper (or finger A only if bit rICF is
# set).
# 0x00 Minimum force.
# 0xFF Maximum force.

uint8 rFRA

# rPRB: Finger B target position. It is only available if bit rICF is set.
# 0x00 Minimum position (open).
# 0xFF Maximum position (close).

uint8 rPRB

# rSPB: Finger B speed. It is only available if bit rICF is set.
# Setting a speed will not initiate a motion.
# 0x00 Minimum speed.
# 0xFF Maximum speed.

uint8 rSPB

# rFRB: Finger B force. It is only available if bit rICF is set.
# 0x00 Minimum force.
# 0xFF Maximum force.

uint8 rFRB

# rPRC: Finger C target position. It is only available if bit rICF is set.
# 0x00 Minimum position (open).
# 0xFF Maximum position (close).

uint8 rPRC

# rSPC: Finger C speed. It is only available if bit rICF is set.
# Setting a speed will not initiate a motion.
# 0x00 Minimum speed.
# 0xFF Maximum speed.

uint8 rSPC

# rFRC: Finger C force. It is only available if bit rICF is set.
# 0x00 Minimum force.
# 0xFF Maximum force.

uint8 rFRC

# rPRS: Scissor axis target position. It is only applied if the Individual
# Control of Scissor option is selected (bit rICS is set).
# 0x00 Minimum position (open).
# 0xFF Maximum position (close).

uint8 rPRS

# rSPS: Scissor axis speed. It is only applied if the Individual
# Control of Scissor option is selected (bit rICS is set).
# 0x00 Minimum speed.
# 0xFF Maximum speed.

uint8 rSPS

# rFRS: Scissor axis force. It is only applied if the Individual
# Control of Scissor option is selected (bit rICS is set).
# 0x00 Minimum force.
# 0xFF Maximum force.

uint8 rFRS
"""
  __slots__ = ['rACT','rMOD','rGTO','rATR','rICF','rICS','rPRA','rSPA','rFRA','rPRB','rSPB','rFRB','rPRC','rSPC','rFRC','rPRS','rSPS','rFRS']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rACT,rMOD,rGTO,rATR,rICF,rICS,rPRA,rSPA,rFRA,rPRB,rSPB,rFRB,rPRC,rSPC,rFRC,rPRS,rSPS,rFRS

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SModelRobotOutput, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rACT is None:
        self.rACT = 0
      if self.rMOD is None:
        self.rMOD = 0
      if self.rGTO is None:
        self.rGTO = 0
      if self.rATR is None:
        self.rATR = 0
      if self.rICF is None:
        self.rICF = 0
      if self.rICS is None:
        self.rICS = 0
      if self.rPRA is None:
        self.rPRA = 0
      if self.rSPA is None:
        self.rSPA = 0
      if self.rFRA is None:
        self.rFRA = 0
      if self.rPRB is None:
        self.rPRB = 0
      if self.rSPB is None:
        self.rSPB = 0
      if self.rFRB is None:
        self.rFRB = 0
      if self.rPRC is None:
        self.rPRC = 0
      if self.rSPC is None:
        self.rSPC = 0
      if self.rFRC is None:
        self.rFRC = 0
      if self.rPRS is None:
        self.rPRS = 0
      if self.rSPS is None:
        self.rSPS = 0
      if self.rFRS is None:
        self.rFRS = 0
    else:
      self.rACT = 0
      self.rMOD = 0
      self.rGTO = 0
      self.rATR = 0
      self.rICF = 0
      self.rICS = 0
      self.rPRA = 0
      self.rSPA = 0
      self.rFRA = 0
      self.rPRB = 0
      self.rSPB = 0
      self.rFRB = 0
      self.rPRC = 0
      self.rSPC = 0
      self.rFRC = 0
      self.rPRS = 0
      self.rSPS = 0
      self.rFRS = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_18B.pack(_x.rACT, _x.rMOD, _x.rGTO, _x.rATR, _x.rICF, _x.rICS, _x.rPRA, _x.rSPA, _x.rFRA, _x.rPRB, _x.rSPB, _x.rFRB, _x.rPRC, _x.rSPC, _x.rFRC, _x.rPRS, _x.rSPS, _x.rFRS))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.rACT, _x.rMOD, _x.rGTO, _x.rATR, _x.rICF, _x.rICS, _x.rPRA, _x.rSPA, _x.rFRA, _x.rPRB, _x.rSPB, _x.rFRB, _x.rPRC, _x.rSPC, _x.rFRC, _x.rPRS, _x.rSPS, _x.rFRS,) = _struct_18B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_18B.pack(_x.rACT, _x.rMOD, _x.rGTO, _x.rATR, _x.rICF, _x.rICS, _x.rPRA, _x.rSPA, _x.rFRA, _x.rPRB, _x.rSPB, _x.rFRB, _x.rPRC, _x.rSPC, _x.rFRC, _x.rPRS, _x.rSPS, _x.rFRS))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.rACT, _x.rMOD, _x.rGTO, _x.rATR, _x.rICF, _x.rICS, _x.rPRA, _x.rSPA, _x.rFRA, _x.rPRB, _x.rSPB, _x.rFRB, _x.rPRC, _x.rSPC, _x.rFRC, _x.rPRS, _x.rSPS, _x.rFRS,) = _struct_18B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_18B = struct.Struct("<18B")
