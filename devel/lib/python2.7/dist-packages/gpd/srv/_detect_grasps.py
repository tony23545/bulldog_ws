# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gpd/detect_graspsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import sensor_msgs.msg
import gpd.msg

class detect_graspsRequest(genpy.Message):
  _md5sum = "f5aafbcfa3b48e6d646c19e1a4b3b6f7"
  _type = "gpd/detect_graspsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """gpd/CloudIndexed cloud_indexed

================================================================================
MSG: gpd/CloudIndexed
# This message holds a point cloud and a list of indices into the point cloud 
# at which to sample grasp candidates.

# The point cloud.
gpd/CloudSources cloud_sources

# The indices into the point cloud at which to sample grasp candidates.
std_msgs/Int64[] indices

================================================================================
MSG: gpd/CloudSources
# This message holds a point cloud that can be a combination of point clouds 
# from different camera sources (at least one). For each point in the cloud, 
# this message also stores the index of the camera that produced the point.

# The point cloud.
sensor_msgs/PointCloud2 cloud

# For each point in the cloud, the index of the camera that acquired the point.
std_msgs/Int64[] camera_source

# A list of camera positions at which the point cloud was acquired.
geometry_msgs/Point[] view_points
================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: std_msgs/Int64
int64 data
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['cloud_indexed']
  _slot_types = ['gpd/CloudIndexed']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cloud_indexed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(detect_graspsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cloud_indexed is None:
        self.cloud_indexed = gpd.msg.CloudIndexed()
    else:
      self.cloud_indexed = gpd.msg.CloudIndexed()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.cloud_indexed.cloud_sources.cloud.header.seq, _x.cloud_indexed.cloud_sources.cloud.header.stamp.secs, _x.cloud_indexed.cloud_sources.cloud.header.stamp.nsecs))
      _x = self.cloud_indexed.cloud_sources.cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.cloud_indexed.cloud_sources.cloud.height, _x.cloud_indexed.cloud_sources.cloud.width))
      length = len(self.cloud_indexed.cloud_sources.cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_indexed.cloud_sources.cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.cloud_indexed.cloud_sources.cloud.is_bigendian, _x.cloud_indexed.cloud_sources.cloud.point_step, _x.cloud_indexed.cloud_sources.cloud.row_step))
      _x = self.cloud_indexed.cloud_sources.cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.cloud_indexed.cloud_sources.cloud.is_dense))
      length = len(self.cloud_indexed.cloud_sources.camera_source)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_indexed.cloud_sources.camera_source:
        buff.write(_struct_q.pack(val1.data))
      length = len(self.cloud_indexed.cloud_sources.view_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_indexed.cloud_sources.view_points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.cloud_indexed.indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_indexed.indices:
        buff.write(_struct_q.pack(val1.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cloud_indexed is None:
        self.cloud_indexed = gpd.msg.CloudIndexed()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.cloud_indexed.cloud_sources.cloud.header.seq, _x.cloud_indexed.cloud_sources.cloud.header.stamp.secs, _x.cloud_indexed.cloud_sources.cloud.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud_indexed.cloud_sources.cloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cloud_indexed.cloud_sources.cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cloud_indexed.cloud_sources.cloud.height, _x.cloud_indexed.cloud_sources.cloud.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_indexed.cloud_sources.cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.cloud_indexed.cloud_sources.cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cloud_indexed.cloud_sources.cloud.is_bigendian, _x.cloud_indexed.cloud_sources.cloud.point_step, _x.cloud_indexed.cloud_sources.cloud.row_step,) = _struct_B2I.unpack(str[start:end])
      self.cloud_indexed.cloud_sources.cloud.is_bigendian = bool(self.cloud_indexed.cloud_sources.cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.cloud_indexed.cloud_sources.cloud.data = str[start:end]
      start = end
      end += 1
      (self.cloud_indexed.cloud_sources.cloud.is_dense,) = _struct_B.unpack(str[start:end])
      self.cloud_indexed.cloud_sources.cloud.is_dense = bool(self.cloud_indexed.cloud_sources.cloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_indexed.cloud_sources.camera_source = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int64()
        start = end
        end += 8
        (val1.data,) = _struct_q.unpack(str[start:end])
        self.cloud_indexed.cloud_sources.camera_source.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_indexed.cloud_sources.view_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.cloud_indexed.cloud_sources.view_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_indexed.indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int64()
        start = end
        end += 8
        (val1.data,) = _struct_q.unpack(str[start:end])
        self.cloud_indexed.indices.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.cloud_indexed.cloud_sources.cloud.header.seq, _x.cloud_indexed.cloud_sources.cloud.header.stamp.secs, _x.cloud_indexed.cloud_sources.cloud.header.stamp.nsecs))
      _x = self.cloud_indexed.cloud_sources.cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.cloud_indexed.cloud_sources.cloud.height, _x.cloud_indexed.cloud_sources.cloud.width))
      length = len(self.cloud_indexed.cloud_sources.cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_indexed.cloud_sources.cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.cloud_indexed.cloud_sources.cloud.is_bigendian, _x.cloud_indexed.cloud_sources.cloud.point_step, _x.cloud_indexed.cloud_sources.cloud.row_step))
      _x = self.cloud_indexed.cloud_sources.cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.cloud_indexed.cloud_sources.cloud.is_dense))
      length = len(self.cloud_indexed.cloud_sources.camera_source)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_indexed.cloud_sources.camera_source:
        buff.write(_struct_q.pack(val1.data))
      length = len(self.cloud_indexed.cloud_sources.view_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_indexed.cloud_sources.view_points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.cloud_indexed.indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_indexed.indices:
        buff.write(_struct_q.pack(val1.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cloud_indexed is None:
        self.cloud_indexed = gpd.msg.CloudIndexed()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.cloud_indexed.cloud_sources.cloud.header.seq, _x.cloud_indexed.cloud_sources.cloud.header.stamp.secs, _x.cloud_indexed.cloud_sources.cloud.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud_indexed.cloud_sources.cloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cloud_indexed.cloud_sources.cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cloud_indexed.cloud_sources.cloud.height, _x.cloud_indexed.cloud_sources.cloud.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_indexed.cloud_sources.cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.cloud_indexed.cloud_sources.cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cloud_indexed.cloud_sources.cloud.is_bigendian, _x.cloud_indexed.cloud_sources.cloud.point_step, _x.cloud_indexed.cloud_sources.cloud.row_step,) = _struct_B2I.unpack(str[start:end])
      self.cloud_indexed.cloud_sources.cloud.is_bigendian = bool(self.cloud_indexed.cloud_sources.cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.cloud_indexed.cloud_sources.cloud.data = str[start:end]
      start = end
      end += 1
      (self.cloud_indexed.cloud_sources.cloud.is_dense,) = _struct_B.unpack(str[start:end])
      self.cloud_indexed.cloud_sources.cloud.is_dense = bool(self.cloud_indexed.cloud_sources.cloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_indexed.cloud_sources.camera_source = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int64()
        start = end
        end += 8
        (val1.data,) = _struct_q.unpack(str[start:end])
        self.cloud_indexed.cloud_sources.camera_source.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_indexed.cloud_sources.view_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.cloud_indexed.cloud_sources.view_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_indexed.indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int64()
        start = end
        end += 8
        (val1.data,) = _struct_q.unpack(str[start:end])
        self.cloud_indexed.indices.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IBI = struct.Struct("<IBI")
_struct_B = struct.Struct("<B")
_struct_q = struct.Struct("<q")
_struct_3I = struct.Struct("<3I")
_struct_B2I = struct.Struct("<B2I")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gpd/detect_graspsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import gpd.msg

class detect_graspsResponse(genpy.Message):
  _md5sum = "41ffbce4bfeb01a8a6398948862ba5d0"
  _type = "gpd/detect_graspsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """gpd/GraspConfigList grasp_configs


================================================================================
MSG: gpd/GraspConfigList
# This message stores a list of grasp configurations.

# The time of acquisition, and the coordinate frame ID.
Header header

# The list of grasp configurations.
gpd/GraspConfig[] grasps

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: gpd/GraspConfig
# This message describes a 2-finger grasp configuration by its 6-DOF pose, 
# consisting of a 3-DOF position and 3-DOF orientation, and the opening 
# width of the robot hand.

# Position
geometry_msgs/Point bottom # centered bottom/base of the robot hand)
geometry_msgs/Point top # centered top/fingertip of the robot hand)
geometry_msgs/Point surface # centered position on object surface

# Orientation represented as three axis (R = [approach binormal axis])
geometry_msgs/Vector3 approach # The grasp approach direction
geometry_msgs/Vector3 binormal # The binormal
geometry_msgs/Vector3 axis # The hand axis

geometry_msgs/Point sample # Point at which the grasp was found

std_msgs/Float32 width # Required aperture (opening width) of the robot hand 

std_msgs/Float32 score # Score assigned to the grasp by the classifier

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['grasp_configs']
  _slot_types = ['gpd/GraspConfigList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       grasp_configs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(detect_graspsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.grasp_configs is None:
        self.grasp_configs = gpd.msg.GraspConfigList()
    else:
      self.grasp_configs = gpd.msg.GraspConfigList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.grasp_configs.header.seq, _x.grasp_configs.header.stamp.secs, _x.grasp_configs.header.stamp.nsecs))
      _x = self.grasp_configs.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.grasp_configs.grasps)
      buff.write(_struct_I.pack(length))
      for val1 in self.grasp_configs.grasps:
        _v1 = val1.bottom
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.top
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = val1.surface
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v4 = val1.approach
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = val1.binormal
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.axis
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v7 = val1.sample
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = val1.width
        buff.write(_struct_f.pack(_v8.data))
        _v9 = val1.score
        buff.write(_struct_f.pack(_v9.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.grasp_configs is None:
        self.grasp_configs = gpd.msg.GraspConfigList()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.grasp_configs.header.seq, _x.grasp_configs.header.stamp.secs, _x.grasp_configs.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.grasp_configs.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.grasp_configs.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.grasp_configs.grasps = []
      for i in range(0, length):
        val1 = gpd.msg.GraspConfig()
        _v10 = val1.bottom
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v11 = val1.top
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = val1.surface
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v13 = val1.approach
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v14 = val1.binormal
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v15 = val1.axis
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v16 = val1.sample
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v17 = val1.width
        start = end
        end += 4
        (_v17.data,) = _struct_f.unpack(str[start:end])
        _v18 = val1.score
        start = end
        end += 4
        (_v18.data,) = _struct_f.unpack(str[start:end])
        self.grasp_configs.grasps.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.grasp_configs.header.seq, _x.grasp_configs.header.stamp.secs, _x.grasp_configs.header.stamp.nsecs))
      _x = self.grasp_configs.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.grasp_configs.grasps)
      buff.write(_struct_I.pack(length))
      for val1 in self.grasp_configs.grasps:
        _v19 = val1.bottom
        _x = _v19
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v20 = val1.top
        _x = _v20
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v21 = val1.surface
        _x = _v21
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v22 = val1.approach
        _x = _v22
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v23 = val1.binormal
        _x = _v23
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v24 = val1.axis
        _x = _v24
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v25 = val1.sample
        _x = _v25
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v26 = val1.width
        buff.write(_struct_f.pack(_v26.data))
        _v27 = val1.score
        buff.write(_struct_f.pack(_v27.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.grasp_configs is None:
        self.grasp_configs = gpd.msg.GraspConfigList()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.grasp_configs.header.seq, _x.grasp_configs.header.stamp.secs, _x.grasp_configs.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.grasp_configs.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.grasp_configs.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.grasp_configs.grasps = []
      for i in range(0, length):
        val1 = gpd.msg.GraspConfig()
        _v28 = val1.bottom
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v29 = val1.top
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v30 = val1.surface
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v31 = val1.approach
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v32 = val1.binormal
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v33 = val1.axis
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v34 = val1.sample
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v35 = val1.width
        start = end
        end += 4
        (_v35.data,) = _struct_f.unpack(str[start:end])
        _v36 = val1.score
        start = end
        end += 4
        (_v36.data,) = _struct_f.unpack(str[start:end])
        self.grasp_configs.grasps.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_f = struct.Struct("<f")
_struct_3d = struct.Struct("<3d")
class detect_grasps(object):
  _type          = 'gpd/detect_grasps'
  _md5sum = '5973d1792c74f9d3213952e5e42396ae'
  _request_class  = detect_graspsRequest
  _response_class = detect_graspsResponse
